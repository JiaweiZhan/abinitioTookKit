#!/scratch/midway2/jiaweiz/anaconda3/bin/python3
import argparse
import os
import signal
import numpy as np
from abinitioToolKit.class_ldos import LDOS
from abinitioToolKit import qe_io, qbox_io
from abinitioToolKit import utils
from mpi4py import MPI
import time
from functools import partial
import pickle
import shutil

comm = MPI.COMM_WORLD

if __name__ == "__main__":

    signal.signal(signal.SIGINT, partial(utils.handler, comm))
    # ----------------------------------Prepare------------------------------------
    rank = comm.Get_rank()
    if rank == 0:
        utils.time_now()

    parser = argparse.ArgumentParser()
    parser.add_argument("-a", "--abinitio", type=str,
            help="abinitio software: qe/qbox. Default: qe")
    parser.add_argument("-s", "--saveFileFolder", type=str,
            help="*.save folder generated by QE or the folder that store qbox output. Default: ./scf.save")
    parser.add_argument("-d", "--delta", type=float,
            help="delta that control local VB/CB. Default: 0.001")
    args = parser.parse_args()

    # default values
    if not args.abinitio:
        args.abinitio = "qe"
    if not args.saveFileFolder:
        args.saveFileFolder = "./scf.save"
    assert(os.path.exists(args.saveFileFolder))
    if not args.delta:
        args.delta = 0.001 

    conf_tab = {"software": args.abinitio,
                "saveFileFolder": args.saveFileFolder,
                "delta": args.delta,
                "MPI size": comm.Get_size()}
    utils.print_conf(conf_tab)

    # ---------------------------------Compute LDOS------------------------------------

    rank = comm.Get_rank()
    st = time.time()

    abinitioRead = None
    if args.abinitio.lower() == "qbox":
        abinitioRead = qbox_io.QBOXRead(comm)
    elif args.abinitio.lower() == "qe":
        abinitioRead = qe_io.QERead(comm)

    storeFolder = './wfc/'
    localDensityOfState = LDOS(read_obj=abinitioRead, delta=args.delta, saveFolder=args.saveFileFolder, comm=comm)
    localDensityOfState.computeLDOS(storeFolder)
    lcbm, lvbm = localDensityOfState.localBandEdge()

    if rank == 0:
        utils.writeLocalBandEdge(lcbm=lcbm, lvbm=lvbm, fileName='ldos.txt')

        with open(storeFolder + '/info.pickle', 'rb') as handle:
            info_data = pickle.load(handle)
        cell = info_data['cell']
        z_length = np.linalg.norm(cell[-1])
        utils.drawLocalBandEdge(lcbm=lcbm, lvbm=lvbm, z_length=z_length, picName='ldos.pdf')

    # get the execution time
    # get the end time
    et = time.time()
    elapsed_time = et - st
    comm.Barrier()
    if rank == 0:
        shutil.rmtree(storeFolder)
        print('Execution time:', elapsed_time, 'seconds')
