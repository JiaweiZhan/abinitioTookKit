# only support qbox yet
from mpi4py import MPI
import argparse
from functools import partial
import signal
import pickle
from tqdm import tqdm
import numpy as np
import shutil, os, sys

from abinitioToolKit import qbox_io, qe_io
from abinitioToolKit import utils

comm = MPI.COMM_WORLD

if __name__ == "__main__":
    signal.signal(signal.SIGINT, partial(utils.handler, comm))

    rank = comm.Get_rank()
    size = comm.Get_size()
    if rank == 0:
        utils.time_now()

    parser = argparse.ArgumentParser()
    parser.add_argument("-a", "--abinitio", type=str,
            help="abinitio software: qe/qbox. Default: qbox")
    parser.add_argument("-s", "--saveFileFolder", type=str,
            help="*.save folder generated by QE or the folder that store qbox output. Default: ../")
    args = parser.parse_args()

    if not args.abinitio:
        args.abinitio = "qbox"
    if not args.saveFileFolder:
        args.saveFileFolder = "../" 

    conf_tab = {"software": args.abinitio,
                "saveFileFolder": args.saveFileFolder,
                "MPI size": comm.Get_size()}
    utils.print_conf(conf_tab)

    # ------------------------------------------- read and store wfc --------------------------------------------
    
    abinitioRead = None
    if args.abinitio.lower() == "qbox":
        abinitioRead = qbox_io.QBOXRead(comm)
    elif args.abinitio.lower() == "qe":
        abinitioRead = qe_io.QERead(comm)
    storeFolder = './wfc/'

    comm.Barrier()
    isExist = os.path.exists(storeFolder)
    if not isExist:
        if rank == 0:
            print(f"store wfc from {storeFolder}")
        abinitioRead.read(args.saveFileFolder, storeFolder=storeFolder)
    else:
        if rank == 0:
            print(f"read stored wfc from {storeFolder}")
     
    # --------------------------------------- compute IPR by states----------------------------------------
    
    # comm.Barrier()
    with open(storeFolder + '/info.pickle', 'rb') as handle:
        info_data = pickle.load(handle)

    nbnd = info_data['nbnd']
    nks = info_data['nks']
    nspin = info_data['nspin']
    fileNameList = info_data['wfc_file']

    # TODO: 1. Qbox has no k point; 2. qe has no different nbnd

    for ispin in range(nspin):
        ipr_loc = np.zeros([nbnd[ispin], nks])
        if rank == 0:
            total_iter = nbnd[ispin]
            pbar = tqdm(desc=f'compute IPR for spin:{ispin + 1:^3}/{nspin:^3}', total=total_iter)
        for ibnd_i in range(nbnd[ispin]): 
            if ibnd_i % size == rank:
                for iks in range(nks):
                    fileName = fileNameList[ispin][iks, ibnd_i]
                    wfc_i = np.load(fileName)
                    ipr_loc[ibnd_i, iks] = np.sum(np.absolute(wfc_i) ** 4) / (np.sum(np.absolute(wfc_i) ** 2) ** 2)

                if rank == 0:
                    value = size
                    if nbnd[ispin] - ibnd_i < value:
                        value = nbnd[ispin] - ibnd_i
                    pbar.update(value)
        if rank == 0:
            pbar.close()
        ipr = np.zeros_like(ipr_loc)
        comm.Allreduce(sendbuf=ipr_loc, recvbuf=ipr, op=MPI.SUM)
        if rank == 0:
            for ibnd_i in range(nbnd[ispin]): 
                for iks in range(nks): 
                    print(f"spin: {ispin + 1} / {nspin} || kpoint:{iks + 1} / {nks} || band ind:{str(ibnd_i + 1):^10}: {ipr[ibnd_i, iks]:10.5f}")
    comm.Barrier()
    if rank == 0:
        shutil.rmtree(storeFolder)

