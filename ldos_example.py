#!/scratch/midway2/jiaweiz/anaconda3/bin/python3
import argparse
import os, shutil
import signal
import numpy as np
from abinitioToolKit.class_ldos import LDOS
from abinitioToolKit import qe_io
from abinitioToolKit import utils
from mpi4py import MPI
import time

comm = MPI.COMM_WORLD

def handler(signum, frame):
    # handler for handle ctrl-C
    print("", end="\r", flush=True)
    print("clean store file", flush=True)
    rank = comm.Get_rank()
    if rank == 0:
        isExist = os.path.exists(LDOS.storeFolder)
        if isExist:
            shutil.rmtree(LDOS.storeFolder)
    comm.Barrier()
    exit(1)

if __name__ == "__main__":

    signal.signal(signal.SIGINT, handler)
    # ----------------------------------Prepare------------------------------------
    rank = comm.Get_rank()
    if rank == 0:
        utils.time_now()

    parser = argparse.ArgumentParser()
    parser.add_argument("-s", "--save_folder", type=str,
            help="*.save folder generated by QE. Default: ./scf.save")
    parser.add_argument("-d", "--delta", type=float,
            help="delta that control local VB/CB. Default: 0.001")
    args = parser.parse_args()

    # default values
    if not args.save_folder:
        args.save_folder = "./scf.save"
    assert(os.path.exists(args.save_folder))
    if not args.delta:
        args.delta = 0.001 

    if rank == 0:
        print(f"configure:\
                \n {''.join(['-'] * 41)}\
                \n{'QE save folder':^20}:{args.save_folder:^20}\
                \n{'delta':^20}:{args.delta:^20}\
                \n {''.join(['-'] * 41)}\n\
                ")

    # ---------------------------------Compute LDOS------------------------------------

    rank = comm.Get_rank()
    st = time.time()

    localDensityOfState = LDOS(delta=args.delta, saveFolder=args.save_folder, comm=comm)
    localDensityOfState.computeLDOS()
    lcbm, lvbm = localDensityOfState.localBandEdge()

    if rank == 0:
        utils.writeLocalBandEdge(lcbm=lcbm, lvbm=lvbm, fileName='ldos.txt')

        qe = qe_io.QERead()
        xml_data = qe.parse_info(args.save_folder + '/data-file-schema.xml', store=False)
        cell = xml_data['cell']
        z_length = np.linalg.norm(cell[-1])
        utils.drawLocalBandEdge(lcbm=lcbm, lvbm=lvbm, z_length=z_length, picName='ldos.pdf')

    # get the execution time
    # get the end time
    et = time.time()
    elapsed_time = et - st
    comm.Barrier()
    if rank == 0:
        print('Execution time:', elapsed_time, 'seconds')
