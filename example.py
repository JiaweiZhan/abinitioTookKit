#!/scratch/midway2/jiaweiz/anaconda3/bin/python3
import argparse
import os, shutil
import signal
from class_ldos import LDOS
import utils

store = True

def handler(signum, frame):
    # handler for handle ctrl-C
    print("", end="\r", flush=True)
    print("clean store file", flush=True)
    if store:
        shutil.rmtree(LDOS.storeFolder)
    exit(1)

if __name__ == "__main__":

    signal.signal(signal.SIGINT, handler)
    # ----------------------------------Prepare------------------------------------
    utils.time_now()

    parser = argparse.ArgumentParser()
    parser.add_argument("-s", "--save_folder", type=str,
            help="*.save folder generated by QE. Default: ./scf.save")
    parser.add_argument("-d", "--delta", type=float,
            help="delta that control local VB/CB. Default: 0.001")
    parser.add_argument("-t", "--thread", type=int,
            help="num of thread. Default: max_thread - 1")
    parser.add_argument("-b", "--backup", type=int,
            help="store wfc on disk 1 or not 0 (store in memory). Default: 1")
    args = parser.parse_args()

    # default values
    if not args.save_folder:
        args.save_folder = "./scf.save"
    assert(os.path.exists(args.save_folder))
    if not args.thread:
        # get the number of logical cpu cores
        n_cores = int(os.cpu_count())
        args.thread = n_cores - 1 
    if not args.delta:
        args.delta = 0.001 
    if not args.backup:
        args.backup = 1 

    if args.backup == 0:
        store = False

    print(f"configure:\
            \n {''.join(['-'] * 41)}\
            \n{'QE save folder':^20}:{args.save_folder:^20}\
            \n{'delta':^20}:{args.delta:^20}\
            \n{'threads':^20}:{args.thread:^20}\
            \n{'wfc->disk':^20}:{bool(args.backup):^20}\
            \n {''.join(['-'] * 41)}\n\
            ")

    # ---------------------------------Compute LDOS------------------------------------

    localDensityOfState = LDOS(delta=args.delta, numThread=args.thread, saveFolder=args.save_folder, backup=args.backup)
    localDensityOfState.computeLDOS()
    lcbm, lvbm = localDensityOfState.localBandEdge()

    utils.writeLocalBandEdge(lcbm=lcbm, lvbm=lvbm, fileName='ldos.txt')
